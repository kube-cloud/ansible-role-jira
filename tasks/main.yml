---

# (c) Wong Hoi Sing Edison <hswong3i@pantarei-design.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: include default variables
  include_vars: "../vars/main.yml"
  tags: jira

- name: include release specific variables
  include_vars: "{{ lookup('first_found', _params) }}"
  vars:
    _params:
      files:
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}.yml"
        - "{{ ansible_os_family | lower }}.yml"
      paths:
        - "../vars"
  ignore_errors: true
  tags: jira

- name: include release specific tasks
  include_tasks: "{{ lookup('first_found', _params) }}"
  vars:
    _params:
      files:
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}.yml"
        - "{{ ansible_os_family | lower }}.yml"
      paths:
        - "."
  ignore_errors: true
  tags: jira

# Find Java version if installed
- name: "Find Java version if installed"
  shell:
  args:
    cmd: java -version 2>&1 | awk -F '"' '/version/ {print $2}'
  register: java_version_run
  tags:
    - molecule-idempotence-notest

# Find User in Passwd Database
- name: "Find Jira Owner in passwd database"
  getent:
    database: passwd
    key: "{{ jira_owner }}"
    fail_key: false

# Find Group in Group Database
- name: "Find Jira Owner group in groups database"
  getent:
    database: group
    key: "{{ jira_group }}"
    fail_key: false

- name: "Define commons facts for roles"
  set_fact:
    jira_owner_exists: "{{ getent_passwd[jira_owner] != None }}"
    jira_group_exists: "{{ getent_group[jira_group] != None }}"
    _jira_create_home: "{{ (jira_create_home|bool) | ternary('--create-home', '') }}"
    _jira_owner_system: "{{ (jira_owner_system|bool) | ternary('--system', '') }}"
    _jira_properties_file: "{{ jira_home }}/{{ jira_properties_file_name }}"
    _jira_db_config_file: "{{ jira_home }}/{{ jira_db_config_file_name }}"
    _jira_config_file_mode: "0755"
    _jira_proxy_enabled: "{{ (jira_catalina_connector_proxyname | length > 0) and \
    (jira_catalina_connector_proxyport is defined) }}"

- name: "Ensure extra packages are installed"
  package:
    name: "{{ item }}"
    state: present
  loop: "{{ _packages }}"

- name: groupadd
  group:
    name: "{{ jira_group }}"
    system: true
    state: "present"
  tags: jira
  when:
    - not jira_group_exists|bool

- name: useradd
  shell:
  args:
    cmd: "useradd {{ jira_owner }} --home {{ jira_home }} --shell {{ jira_shell }} \
     -g {{ jira_group }} {{ _jira_owner_system }} {{ _jira_create_home }}"
  tags:
    - jira
    - molecule-idempotence-notest
  when:
    - not jira_owner_exists|bool

- name: prepare directories
  file:
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0755') }}"
    state: "{{ item.state | default('directory') }}"
  loop:
    - { dest: "/etc/init.d" }
    - { dest: "/lib/systemd/system" }
    - { dest: "{{ jira_download.dest | dirname }}" }
    - { dest: "{{ mysql_jdbc_download.dest | dirname }}" }
    - { dest: "{{ postgresql_jdbc_download.dest | dirname }}" }
    - dest: "{{ jira_catalina }}"
      owner: "{{ jira_owner }}"
      group: "{{ jira_group }}"
    - dest: "{{ jira_catalina }}/bin"
      owner: "{{ jira_owner }}"
      group: "{{ jira_group }}"
    - dest: "{{ jira_catalina }}/conf"
      owner: "{{ jira_owner }}"
      group: "{{ jira_group }}"
    - dest: "{{ jira_home }}"
      owner: "{{ jira_owner }}"
      group: "{{ jira_group }}"
    - dest: "{{ jira_backup_home }}"
      owner: "{{ jira_owner }}"
      group: "{{ jira_group }}"

  tags: jira

- name: download archive
  vars:
    ansible_python_interpreter: "{{ ansible_facts.python.executable }}"
  get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
    checksum: "{{ item.checksum }}"
    timeout: 300
  loop:
    - "{{ jira_download }}"
    - "{{ mysql_jdbc_download }}"
    - "{{ postgresql_jdbc_download }}"
  register: get_url_result
  until: get_url_result is succeeded
  tags: jira

- name: unarchive package
  shell: |
    set -o pipefail
    rm -rf {{ jira_catalina }} \
      && mkdir -p {{ jira_catalina }}
    cd {{ jira_catalina }}
    TMP_DIR="$(mktemp -d)" \
      && tar -zx -C $TMP_DIR -f {{ jira_download.dest }} \
      && cp -rfT $TMP_DIR/* . \
      && rm -rf $TMP_DIR
    cd {{ jira_catalina }}/lib
    rm -rf *mysql*.jar
    TMP_DIR="$(mktemp -d)" \
      && tar -zx -C $TMP_DIR -f {{ mysql_jdbc_download.dest }} \
      && mv $TMP_DIR/*/*mysql*-bin.jar . \
      && rm -rf $TMP_DIR
    cd {{ jira_catalina }}/lib
    rm -rf *postgresql*.jar
    cp {{ postgresql_jdbc_download.dest }} .
    chown -Rf {{ jira_owner }}:{{ jira_group }} {{ jira_catalina }}
    chmod 0755 \
      {{ jira_catalina }} \
      {{ jira_catalina }}/bin \
      {{ jira_catalina }}/conf
  args:
    executable: "/bin/bash"
  when: get_url_result is changed
  notify:
    - jira | systemctl daemon-reload
    - jira | systemctl restart
  tags: jira

- name: copy templates
  template:
    dest: "{{ item.dest }}"
    src: "{{ item.src | default('./templates' + item.dest + '.j2') }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
  loop:
    - { dest: "/etc/init.d/jira", mode: "0755" }
    - { dest: "/lib/systemd/system/jira.service" }
    - dest: "{{ jira_catalina }}/bin/setenv.sh"
      src: "./templates/opt/atlassian/jira/bin/setenv.sh.j2"
      owner: "{{ jira_owner }}"
      group: "{{ jira_group }}"
      mode: "0755"
    - dest: "{{ jira_catalina }}/conf/server.xml"
      src: "./templates/opt/atlassian/jira/conf/server.xml.j2"
      owner: "{{ jira_owner }}"
      group: "{{ jira_group }}"
  notify:
    - jira | systemctl daemon-reload
    - jira | systemctl restart
  tags: jira

- name: prepare files
  file:
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
    state: "{{ item.state | default('file') }}"
  loop:
    - { dest: "/etc/init.d/jira", mode: "0755" }
    - { dest: "/lib/systemd/system/jira.service" }
    - dest: "{{ jira_catalina }}/bin/setenv.sh"
      owner: "{{ jira_owner }}"
      group: "{{ jira_group }}"
      mode: "0755"
    - dest: "{{ jira_catalina }}/conf/server.xml"
      owner: "{{ jira_owner }}"
      group: "{{ jira_group }}"
  tags: jira

# Ensure that dbconfig file dont exists
- name: Ensure that dbconfig file dont exists
  file:
    path: "{{ _jira_db_config_file }}"
    state: absent
  tags:
    - molecule-idempotence-notest
  when:
    - jira_config_file_generation is defined
    - jira_config_file_generation|bool

- name: Generate database configuration
  template:
    dest: "{{ _jira_db_config_file }}"
    src: "./templates/var/atlassian/application-datas/jira/dbconfig.xml.j2"
    owner: "{{ jira_owner }}"
    group: "{{ jira_group }}"
    mode: "{{ _jira_config_file_mode }}"
  tags:
    - molecule-idempotence-notest
  when:
    - jira_config_file_generation is defined
    - jira_config_file_generation|bool

# Ensure that property file dont exists
- name: Ensure that property file dont exists
  file:
    path: "{{ _jira_properties_file }}"
    state: absent
  tags:
    - molecule-idempotence-notest
  when:
    - jira_config_file_generation is defined
    - jira_config_file_generation|bool

- name: Generate jira propertie file with initial content ({{ jira_properties_file_name }})
  blockinfile:
    path: "{{ _jira_properties_file }}"
    create: true
    block: |
      # Jira customization properties file
    owner: "{{ jira_owner }}"
    group: "{{ jira_group }}"
    mode: "{{ _jira_config_file_mode }}"
    state: present
  tags:
    - molecule-idempotence-notest
  when:
    - jira_config_file_generation is defined
    - jira_config_file_generation|bool

# Add other properties if exists
- name: Add other properties if exists
  lineinfile:
    dest: "{{ _jira_properties_file }}"
    regexp: "^{{ item.key }}=.*$"
    insertafter: "server.scheme"
    line: "{{ item.key }}={{ item.value }}"
    owner: "{{ jira_owner }}"
    group: "{{ jira_group }}"
    mode: "{{ _jira_config_file_mode }}"
    state: present
  loop: "{{ jira_extra_properties }}"
  tags:
    - molecule-idempotence-notest
  when:
    - jira_config_file_generation is defined
    - jira_config_file_generation|bool
    - jira_extra_properties | length > 0

- name: flush handlers
  meta: flush_handlers
  tags: jira

- name: start service
  service:
    name: "jira"
    state: "started"
    enabled: true
  changed_when: false
  ignore_errors: true
  tags: jira
